[["index.html", "Group Policy on Linux 1 About", " Group Policy on Linux David Mulder 2022-11-16 1 About This book introduces the user to opensource tools for managing Linux clients via Group Policy. "],["intro.html", "2 Introduction 2.1 What’s the difference between Group Policy and a Group Policy Object? 2.2 Server Side Extensions 2.3 Client Side Extensions 2.4 Policies Introduced in this Book 2.5 Resultant Set of Policy", " 2 Introduction Samba version 4.14 and newer ships with Linux client Group Policy. The Group Policy offerings are made to be similar to what is offered by proprietary tools, such as Vintela’s and Centrify’s Group Policy. Group Policy provides centralized management and configuration of operating system, application, and user settings. Policies are delivered to clients by listing them in LDAP, under groupPolicyContainer objects. These objects provide the gPCFileSysPath attribute, which points to policy information stored on the domains SYSVOL share. 2.1 What’s the difference between Group Policy and a Group Policy Object? A Group Policy Object (GPO) is a collection of settings that apply to a set of machines or users in a group. You can think of Group Policy like a template for a work order, and a Group Policy Object like a filled out copy of that template. A GPO is a work order of instructions to follow. That work order will be distributed to every member of the group, and it’s up to each member to decide how it applies those instructions. A GPO is modified by a Server Side Extension, and it is applied for a group member by a Client Side Extension. 2.2 Server Side Extensions The purpose of a Server Side Extension (SSE) is to fill out a work order (a Group Policy Object). On Windows, this generally refers to some component of the Group Policy Management Editor. Group Policy Management Editor In Samba, this also includes the samba-tool gpo manage command. &gt; samba-tool gpo manage Usage: samba-tool gpo manage &lt;subcommand&gt; Manage Group Policy Objects Options: -h, --help show this help message and exit Available subcommands: access - Manage Host Access Group Policy Objects files - Manage Files Group Policy Objects issue - Manage Issue Group Policy Objects motd - Manage Message of the Day Group Policy Objects openssh - Manage OpenSSH Group Policy Objects scripts - Manage Scripts Group Policy Objects security - Manage Security Group Policy Objects smb_conf - Manage smb.conf Group Policy Objects sudoers - Manage Sudoers Group Policy Objects symlink - Manage symlink Group Policy Objects When working with Linux clients, using samba-tool gpo manage to fill out your GPO is generally the preferred method. 2.2.1 Enabling Group Policy Server Side Extensions on the Server In order to use the Samba Administrative Templates in the Group Policy Management Console, you’ll need to install them first, using the command sudo samba-tool gpo admxload -UAdministrator. The samba-tool gpo admxload command copies the Samba ADMX templates to the /Policies/PolicyDefinitions directory on the SYSVOL share. After installing the Samba ADMX templates, you MUST install Microsoft’s ADMX templates also, otherwise you will be unable to administer Windows domain members. To install Microsoft’s ADMX templates, use msiextract to extract the contents of the Administrative Templates msi: msiextract /path/to/microsoft/download/Administrative\\ Templates\\ \\(.admx\\)\\ for\\ Windows\\ 10\\ October\\ 2020\\ Update.msi Then upload the contents to the SYSVOL: samba-tool gpo admxload -U Administrator --admx-dir=/path/to/extracted/msi/Program\\ Files/Microsoft\\ Group\\ Policy/Windows\\ 10\\ October\\ 2020\\ Update\\ \\(20H2\\)/PolicyDefinitions/ 2.3 Client Side Extensions In Group Policy vernacular, a Client Side Extension (CSE) is an encapsulated module on a client machine intended to enforce a specific policy. The responsibility of the CSE is to install that policy on the client and ensure it is enforced. It’s also the responsibility of the CSE to remove the policy when disabled by the server. In Samba, a CSE looks like a single python file. Within that file, the CSE inherits from one of several base classes provided by Samba which provide settings from the server. This is discussed in more detail in chapter 19. 2.3.1 Enabling Group Policy Client Side Extensions on the Linux Client To enable Group Policy in Winbind, set the apply group policies global smb.conf option to Yes. You can even deploy this setting from Group Policy smb.conf options, then running the apply command manually the first time with sudo samba-gpupate --force. Policies are enforced at a random interval between 90 and 120 seconds. Policies can be manually enforced at any time on a Linux domain member using the samba-gpupdate --force command. Winbind will enforce both machine policy (as of Samba 4.14) and user policy (as of Samba 4.18). If the Linux client is joined using SSSD, you can instead enforce the policy using oddjob-gpupdate. The samba-gpupdate command from Samba must also be installed. 2.4 Policies Introduced in this Book This section will provide a brief overview of the policies that will be discussed in upcoming chapters. 2.4.1 smb.conf Policies These policies distribute smb.conf global options to the client. These are found in the Group Policy Management Editor (GPME) under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; smb.conf. This policy is unable to apply idmap policies. 2.4.2 Password and Kerberos Policies Password and Kerberos policies are found in the GPME under Computer Configuration &gt; Policies &gt; OS Settings &gt; Security Settings &gt; Account Policy. These policies are only applicable to Samba Active Directory Domain Controllers. 2.4.3 Script Policies Script policies create cron jobs on client machines which execute the specified commands. These are found in the GPME under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Scripts. 2.4.3.1 Centrify Crontab Entries Samba provides an extension which adds compatibility with Centrify’s Crontab Entries Group Policy. If you are currently using Centrify Group Policy to distribute Crontab entry policies, these will automatically be applied by samba-gpupdate. 2.4.4 Startup Script Policies Startup script policies allow you to upload the script that will be executed to the SYSVOL, as well as scheduling the command to run at startup. These scripts can be set using the samba-tool gpo manage scripts startup command. 2.4.5 Files Policy The Files policy deploys files to client machines. These files are uploaded to the SYSVOL via the samba-tool gpo manage files command. 2.4.6 Symlink Policies The symlink policy creates symbolic links on client machines. This policy is set via the samba-tool gpo manage symlink command. This policy is compatible with Vintela’s Symlink Group Policy. 2.4.7 Sudoers Policies Sudoers policies add sudo rules to client machines. These policies can be managed in the GPME under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Sudo Rights. 2.4.7.1 VGP Sudoers Policies Another Sudoers extension is available for compatibility with Vintela’s Sudoers Group Policy. The policy for this extension can be modified using the samba-tool gpo manage sudo command. 2.4.7.2 Centrify Sudoers Policies A third Sudoers extension is available to provide compatibility with Centrify’s Sudoers Group Policy. If you are currently using Centrify Group Policy to distribute Sudoers policies, these will automatically be applied by samba-gpupdate. Samba Sudoers, VGP Sudoers, and Centrify Sudoers policies can be safely used in conjunction with one another, since these policies are non-overlapping. 2.4.8 Message Policies Message policies set the contents of the /etc/motd and /etc/issue files on client machines. These policies can be managed in the GPME under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Messages. 2.4.8.1 VGP Message Policies Other VGP Message extensions are available for compatibility with Vintela’s MOTD and Issue Group Policies. The policies for these extensions can be modified using the samba-tool gpo manage motd and samba-tool gpo manage issue commands. Beware that applying both the Samba and VGP message policies will cause unpredictable behavior, since both policies will apply and will overwrite one another. 2.4.9 PAM Access Policies PAM Access policies set access rules within /etc/security/access.d. These policies are set using the samba-tool gpo manage access command. This policy is compatible with Vintela’s Access Group Policy. 2.4.10 Certificate Auto Enrollment Certificate Auto Enrollment allows devices to enroll for certificates from Active Directory Certificate Services. Certificate Auto Enrollment is available in Samba 4.16 and above. 2.4.11 Firefox Policy Firefox policies can be administered using the Mozilla policy templates provided by Mozilla. 2.4.12 Chromium/Chrome Policy Chromium and Google Chrome policies can be administered using the Chrome policy templates provided by Google. 2.4.13 GNOME Settings GNOME Settings policies are found in the GPME under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; GNOME. These policies manage some GNOME user settings, as described in the GNOME system admin guide, such as the compose key, screen dimming, online account management, extensions, and the ability to disable printing, file saving, command line access, fingerprint logon, logout, user switching, and reparitioning. There is also a general method for disabling any specific GNOME lockdown value. 2.4.14 OpenSSH Policy OpenSSH policy applies settings to /etc/ssh/sshd_config.d. These policies can be set using the samba-tool gpo manage openssh command. These policies are compatible with Vintela’s OpenSSH Group Policy. 2.4.15 Firewalld Policy Firewalld policy applies firewall rules using the firewall-cmd command. These policies can be found in the GPME under Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Firewalld. 2.5 Resultant Set of Policy To see what policies will apply to a machine before applying them (or to view what policies are already applied), run the command sudo samba-gpupdate --rsop. linux-h7xz:~ # samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ============================================================ CSE: gp_sec_ext ------------------------------ ------------------------------ CSE: gp_sec_ext ------------------------------ ------------------------------ CSE: gp_scripts_ext ------------------------------ ------------------------------ CSE: gp_sudoers_ext ------------------------------ Policy Type: Sudo Rights ------------------------------ [ tux ALL=(ALL) NOPASSWD: ALL ] ------------------------------ ------------------------------ CSE: gp_smb_conf_ext ------------------------------ Policy Type: smb.conf ------------------------------ [ apply group policies ] = 1 [ client max protocol ] = SMB2_02 ------------------------------ ------------------------------ CSE: gp_msgs_ext ------------------------------ Policy Type: /etc/motd ------------------------------ This message is distributed by Samba! ------------------------------ Policy Type: /etc/issue ------------------------------ Samba Group Policy \\s \\r \\l ------------------------------ ------------------------------ ============================================================ "],["manage.html", "3 Managing Group Policies 3.1 Creating a Group Policy Object 3.2 Deleting a Group Policy Object 3.3 Group Policy Links 3.4 Listing a Group Policy 3.5 Modifying a Group Policy", " 3 Managing Group Policies Before diving into specific Group Policies, let’s review the basics of managing Group Policy. A Windows Active Directory Administrator should know that Group Policies are managed via the Group Policy Management Console (GPMC). Unfortunately there isn’t a similar tool for Samba Active Directory Administrators. The Samba project does provide the comprehensive samba-tool gpo command, which supplants much of the GPMC. There are instances where Samba’s Group Policy can only be managed via the GPMC, with no samba-tool gpo alternative. These cases will be highlighted in the text. 3.1 Creating a Group Policy Object The samba-tool gpo create command is used to create a Group Policy Object. &gt; samba-tool gpo create --help Usage: samba-tool gpo create &lt;displayname&gt; [options] Create an empty GPO. 3.2 Deleting a Group Policy Object &gt; samba-tool gpo del --help Usage: samba-tool gpo del &lt;gpo&gt; [options] Delete a GPO. 3.3 Group Policy Links &gt; samba-tool gpo setlink --help Usage: samba-tool gpo setlink &lt;container_dn&gt; &lt;gpo&gt; [options] Add or update a GPO link to a container. &gt; samba-tool gpo dellink --help Usage: samba-tool gpo dellink &lt;container_dn&gt; &lt;gpo&gt; [options] Delete GPO link from a container. 3.4 Listing a Group Policy &gt; samba-tool gpo list --help Usage: samba-tool gpo list &lt;username|machinename&gt; [options] List GPOs for an account. 3.5 Modifying a Group Policy The samba-tool gpo manage is used for modifying settings on a Group Policy Object. See the individual chapters for each subcommand explanation. samba-tool command Chapter samba-tool gpo manage smb_conf 4 samba-tool gpo manage security 5 samba-tool gpo manage scripts startup 7 samba-tool gpo manage files 8 samba-tool gpo manage symlink 9 samba-tool gpo manage sudoers 10 samba-tool gpo manage issue 11 samba-tool gpo manage motd 11 samba-tool gpo manage access 12 samba-tool gpo manage openssh 17 "],["smbconf.html", "4 smb.conf Policies 4.1 Server Side Extension 4.2 Client Side Extension", " 4 smb.conf Policies The purpose of the smb.conf policies is to be able to distribute smb.conf settings to Linux clients. This policy only supports a physical smb.conf file, and currently does not support smb.conf registry settings. These policies are physically stored on the SYSVOL in the MACHINE/Registry.pol file in the subdirectory of the Group Policy Object. They are stored in registry format, and are difficult to modify manually. See chapter 21 for details on how to manually modify this file. 4.1 Server Side Extension The Server Side Extension for smb.conf policies is distributed using Administrative Templates (ADMX). Refer to chapter 20 in section 20.1 for details about Administrative Templates. The smb.conf ADMX templates are distributed with the Samba binaries. Consult with your Samba maintainer as to where these templates are packaged. On openSUSE, for example, they are packaged in the samba-ad-dc package. To install the smb.conf ADMX, you use the samba-tool gpo admxload command. samba-tool gpo admxload --realm=REALM -UAdministrator --admx-dir=/usr/share/samba/admx When running this command, you should be able to ommit the --admx-dir if the Samba ADMX templates are installed. You can also ommit the --realm option if the machine is joined to the domain. 4.1.1 Managing smb.conf Policies via the GPME After successfully installing the ADMX templates, open the Group Policy Management Editor (GPME) and navigate to Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; smb.conf. For instructions on accessing the GPME, see chapter 3 section 3.1. smb.conf Server Side Extension (ADMX) For this example, we’re going to enable the apply group policies setting. This setting instructs Winbind to execute the samba-gpupdate command on the Group Policy interval (every 90 to 120 minutes). There are many other settings available here, but notice that idmap policies are not. That’s because idmap policies modify the setting name (not just the value). apply group policies Setting Apply the policy change, and close the GPME. 4.1.2 Managing smb.conf Policies via samba-tool Setting an smb.conf Group Policy via samba-tool is arguably much simpler. &gt; samba-tool gpo manage smb_conf set --help Usage: samba-tool gpo manage smb_conf set &lt;gpo&gt; &lt;setting&gt; &lt;value&gt; [options] Sets a Samba smb.conf Group Policy to the sysvol This command sets an smb.conf setting to the sysvol for applying to winbind clients. Not providing a value will unset the policy. Example: samba-tool gpo manage smb_conf set {31B2F340-016D-11D2-945F-00C04FB984F9} &#39;apply gpo policies&#39; yes This command does not require the ADMX templates to be installed, and also does not suffer from the same limitation as the GPME for idmap policies. 4.2 Client Side Extension The smb.conf Client Side Extension (CSE) directly modifies the default smb.conf file. Any custom formatting or comments in the smb.conf file may be overwritten. The CSE will open your existing smb.conf file, read in the current settings, set the settings provided by the GPO, then write the file back to disk. This CSE will only write global smb.conf options. In the previous section, we enabled the apply group policies smb.conf option. If we now go to our Linux client, and check the Resultant Set of Policy, we see this: &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: gp_smb_conf_ext ----------------------------------------------------------- Policy Type: smb.conf ----------------------------------------------------------- [ apply group policies ] = 1 ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= If we now force the policy, we’ll see our setting gets applied to the default smb.conf: &gt; sudo /usr/sbin/samba-gpupdate --force &gt; diff -u /etc/samba/smb.conf.BAK /etc/samba/smb.conf --- /etc/samba/smb.conf.BAK +++ /etc/samba/smb.conf @@ -1,5 +1,6 @@ # Global parameters [global] + apply group policies = Yes kerberos method = secrets and keytab logon drive = P: logon home = \\\\%L\\%U\\.9xprofile If for whatever reason the policy did not apply, it is sometimes helpful to look at the Group Policy Log, which keeps track of applied policies. &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;smb.conf&quot;&gt; &lt;attribute name=&quot;apply group policies&quot;&gt;yes&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; Where TESTSYSDM$ is the system name. You can see in our case Samba has recorded applying the Group Policy Object with GUID {31B2F340-016D-11D2-945F-00C04FB984F9} (this is the Default Domain Policy), and that it set apply group policies = yes in our smb.conf. "],["sec.html", "5 Password and Kerberos Policies 5.1 Server Side Extension 5.2 Client Side Extension", " 5 Password and Kerberos Policies The purpose of these policies is to enforce password complexity and kerberos rules on a Samba Active Directory Domain Controller (ADDC). When a Linux client is not an ADDC, these policies are disabled and ignored automatically. These policies are physically stored on the SYSVOL in the MACHINE/Microsoft/Windows NT/SecEdit/GptTmpl.inf file in the subdirectory of the Group Policy Object. They are stored in ini format, and are easily modified manually using a text editor. 5.1 Server Side Extension The Group Policy Management Editor (GPME) contains a built in Server Side Extension for Password and Kerberos Policies. There is also a samba-tool command to modify these policies. 5.1.1 Managing Password and Kerberos Policies via the GPME Open the GPME and navigate to Computer Configuration &gt; Policies &gt; Windows Settings &gt; Security Settings &gt; Account Policy. The following password policies are applicable to a Samba ADDC: Maximum password age Minimum password age Minimum password length Password must meet complexity requirements Password Policies The following Kerberos policies are applicable to a Samba ADDC: Maximum lifetime for service ticket Maximum lifetime for user ticket Maximum lifetime for user ticket renewal Kerberos Policies 5.1.2 Managing Password and Kerberos Policies via samba-tool The Password and Kerberos policies can also be set via samba-tool. &gt; samba-tool gpo manage security set --help Usage: samba-tool gpo manage security set &lt;gpo&gt; &lt;setting&gt; &lt;value&gt; [options] Set Samba Security Group Policy to the sysvol This command sets a security setting to the sysvol for applying to winbind clients. Not providing a value will unset the policy. These settings only apply to the ADDC. Example: samba-tool gpo manage security set {31B2F340-016D-11D2-945F-00C04FB984F9} MaxTicketAge 10 Possible policies: MaxTicketAge Maximum lifetime for user ticket Defined in hours MaxServiceAge Maximum lifetime for service ticket Defined in minutes MaxRenewAge Maximum lifetime for user ticket renewal Defined in minutes MinimumPasswordAge Minimum password age Defined in days MaximumPasswordAge Maximum password age Defined in days MinimumPasswordLength Minimum password length Defined in characters PasswordComplexity Password must meet complexity requirements 1 is Enabled, 0 is Disabled 5.2 Client Side Extension The Password and Kerberos policies are seperated into two Client Side Extensions (CSE), gp_access_ext and gp_krb_ext. The Password policies (internally known as System Access) apply password complexity rules directly to the ADDC SamDB in the applicable LDAP attributes. The Kerberos policies are stored in our Group Policy Log, and are fetched directly by the samba daemon when it loads. In the previous section we saw that our Password and Kerberos policies were already initialized to some defaults. If we now go to our Linux client, and check the Resultant Set of Policy, we see this: &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: gp_access_ext ----------------------------------------------------------- Policy Type: System Access ----------------------------------------------------------- [ MinimumPasswordAge ] = 1 [ MaximumPasswordAge ] = 42 [ MinimumPasswordLength ] = 7 [ PasswordComplexity ] = 1 ----------------------------------------------------------- ----------------------------------------------------------- CSE: gp_krb_ext ----------------------------------------------------------- Policy Type: Kerberos Policy ----------------------------------------------------------- [ MaxTicketAge ] = 10 [ MaxRenewAge ] = 7 [ MaxServiceAge ] = 600 ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= Remember that these policies will only be listed if your Linux client is a Samba ADDC. Let’s now force a policy apply, and check that the settings have changed. &gt; sudo /usr/sbin/samba-gpupdate --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;System Access&quot;&gt; &lt;attribute name=&quot;minPwdAge&quot;/&gt; &lt;attribute name=&quot;maxPwdAge&quot;/&gt; &lt;attribute name=&quot;minPwdLength&quot;/&gt; &lt;attribute name=&quot;pwdProperties&quot;/&gt; &lt;/gp_ext&gt; &lt;gp_ext name=&quot;Kerberos Policy&quot;&gt; &lt;attribute name=&quot;kdc:user_ticket_lifetime&quot;/&gt; &lt;attribute name=&quot;kdc:renewal_lifetime&quot;/&gt; &lt;attribute name=&quot;kdc:service_ticket_lifetime&quot;/&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &#39;kdc:user_ticket_lifetime&#39;; echo 10 &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &#39;kdc:service_ticket_lifetime&#39;; echo 10 &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &#39;kdc:renewal_lifetime&#39;; echo 168 You can see the Kerberos policies are all stored in their own keys in the Group Policy Log (/var/lib/samba/gpo.tdb), and they are all stored in hours. On the SYSVOL, they are actually stored in hours, minutes, and days, respectively. The reason these are all stored in hours on the system is that the samba daemon expects these attributes in hours. If we check the contents of the GptTmpl.inf and do some conversion, we can confirm these are correct. [Kerberos Policy] MaxTicketAge = 10 MaxServiceAge = 600 MaxRenewAge = 7 &gt;&gt;&gt; from samba.gp.gp_sec_ext import mins_to_hours, days_to_hours &gt;&gt;&gt; MaxTicketAge = 10 &gt;&gt;&gt; MaxServiceAge = 600 &gt;&gt;&gt; MaxRenewAge = 7 &gt;&gt;&gt; mins_to_hours(MaxServiceAge) &#39;10&#39; &gt;&gt;&gt; days_to_hours(MaxRenewAge) &#39;168&#39; It also helps to know how these Kerberos policies map to the samba daemon settings. Kerberos Policy Samba Setting Conversion MaxTicketAge kdc:user_ticket_lifetime None MaxServiceAge kdc:service_ticket_lifetime Minutes to Hours MaxRenewAge kdc:renewal_lifetime Days to Hours While the Kerberos policies have been stored to the Group Policy Log as expected, let’s next verify that the Password policies have been applied using the following ldapsearch. &gt; ldapsearch -H ldap://lizardo.suse.de -x -W -D &quot;Administrator@lizardo.suse.de&quot; -b DC=lizardo,DC=suse,DC=de -s base minPwdAge maxPwdAge minPwdLength pwdProperties # lizardo.suse.de dn: DC=lizardo,DC=suse,DC=de maxPwdAge: -36288000000000 minPwdAge: -864000000000 minPwdLength: 7 pwdProperties: 1 We can confirm these were set correctly by checking the contents of the GptTmpl.inf, plus doing some type conversion. [System Access] MinimumPasswordAge = 1 MaximumPasswordAge = 42 MinimumPasswordLength = 7 PasswordComplexity = 1 &gt;&gt;&gt; from samba.gp.gp_sec_ext import days2rel_nttime &gt;&gt;&gt; MinimumPasswordAge = 1 &gt;&gt;&gt; MaximumPasswordAge = 42 &gt;&gt;&gt; MinimumPasswordLength = 7 &gt;&gt;&gt; PasswordComplexity = 1 &gt;&gt;&gt; days2rel_nttime(MaximumPasswordAge) &#39;-36288000000000&#39; &gt;&gt;&gt; days2rel_nttime(MinimumPasswordAge) &#39;-864000000000&#39; Finally, here is how these policies map. Password Policy LDAP Attribute Conversion MinimumPasswordAge minPwdAge Days to NTTIME MaximumPasswordAge maxPwdAge Days to NTTIME MinimumPasswordLength minPwdLength None PasswordComplexity pwdProperties None "],["scripts.html", "6 Script Policies 6.1 Server Side Extension 6.2 Client Side Extension", " 6 Script Policies The purpose of this policy is to schedule cron jobs on a Linux client. Both Machine and User policy is supported. This policy does not upload a script for execution, it only schedules an existing script to run. To first load a script onto the client, see the Files Policy in chapter 8. This policy is physically stored on the SYSVOL in the MACHINE/Registry.pol and USER/Registry.pol files within the subdirectory of the Group Policy Object. It is stored in registry format. See chapter 21 for details on how to manually modify this file. 6.1 Server Side Extension The Server Side Extension for smb.conf policies is distributed using Administrative Templates (ADMX). Refer to chapter 20 in section 20.1 for details about Administrative Templates. Setting up the ADMX templates for this policy is described in chapter 4 section 4.1. 6.1.1 Managing Machine Scripts Policies via the GPME Open the Group Policy Management Editor (GPME) and navigate to Computer Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Scripts. For instructions on accessing the GPME, see chapter 3 section 3.1. Scripts Server Side Extension (ADMX) As an example, we’ll create a simple cron job which echo’s “hello world” once every day. Script Example 6.1.2 Managing User Scripts Policies via the GPME Next we’ll create a user script that echo’s the text “Don’t do that Dave” every hour. Open the Group Policy Management Editor (GPME) and navigate to User Configuration &gt; Policies &gt; Administrative Templates &gt; Samba &gt; Unix Settings &gt; Scripts. User Script Example 6.2 Client Side Extension The Scripts Client Side Extension (CSE) creates cron jobs on the Linux client. For Machine policy, these jobs are installed in a file within the /etc/cron.daily, /etc/cron.monthly, /etc/cron.weekly and /etc/cron.hourly directories. For User policy, the user’s crontab file is directly modified. In the previous section we created two test Script policies. If we now go to our Linux client, and check the Resultant Set of Policy, we see this: &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= ----------------------------------------------------------- CSE: gp_scripts_ext ----------------------------------------------------------- Policy Type: Daily Scripts ----------------------------------------------------------- [ echo hello world ] ----------------------------------------------------------- ----------------------------------------------------------- CSE: gp_centrify_crontab_ext ----------------------------------------------------------- Policy Type: Centrify/CrontabEntries ----------------------------------------------------------- [ @daily echo hello world from Centrify ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= &gt; sudo /usr/sbin/samba-gpupdate --target=User -U tux --rsop Resultant Set of Policy User Policy GPO: Default Domain Policy ================================================================= CSE: gp_user_scripts_ext ----------------------------------------------------------- Policy Type: Hourly Scripts ----------------------------------------------------------- [ echo Don&#39;t do that Dave ] ----------------------------------------------------------- ----------------------------------------------------------- CSE: gp_user_centrify_crontab_ext ----------------------------------------------------------- Policy Type: Centrify/CrontabEntries ----------------------------------------------------------- [ @hourly echo Don&#39;t do that Dave from Centrify ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= In addition to the expected scripts that we added previously, you’ll notice there are 2 additional entries. The gp_centrify_crontab_ext and gp_user_centrify_crontab_ext CSEs parse policies provided by a Centrify Server Side Extension. These weren’t introduced previously in the chapter because they are a proprietary solution not provided by Samba. Samba provides a CSE to apply these for compatability reasons, but does not provide a SSE to set them. These CSEs are provided to assist in migration from proprietary technologies. We won’t discuss these any further. Let’s now force an apply, and verify that the cron jobs are scheduled. &gt; sudo /usr/sbin/samba-gpupdate --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | sed -r &quot;s/\\\\\\5C/\\\\\\\\/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;Unix Settings/Scripts&quot;&gt; &lt;attribute name=&quot;Software\\Policies\\Samba\\Unix Settings\\Daily Scripts:ZWNobyBoZWxsbyB3b3JsZA==&quot;&gt;/etc/cron.daily/gp_m94kdru9&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; &gt; sudo /usr/sbin/samba-gpupdate --target=User -U tux --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;LIZARDO\\\\tux&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | sed -r &quot;s/\\\\\\5C/\\\\\\\\/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;LIZARDO\\tux&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;Unix Settings/Scripts&quot;&gt; &lt;attribute name=&quot;Software\\Policies\\Samba\\Unix Settings\\Hourly Scripts:94d6cccd227ea60f662a2ea161560329df75d24b64265c405ba16209c715a0bb274b39b07d2c825dc926341839067d90a80d5570b2c68607b16915fd806de415&quot;&gt;@hourly echo Don&#39;t do that Dave&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; First we see that the machine policy created the script /etc/cron.daily/gp_m94kdru9. Let’s take a look at the contents. &gt; sudo cat /etc/cron.daily/gp_m94kdru9 #!/bin/sh ### autogenerated by samba # # This file is generated by the gp_scripts_ext Group Policy # Client Side Extension. To modify the contents of this file, # modify the appropriate Group Policy objects which apply # to this machine. DO NOT MODIFY THIS FILE DIRECTLY. # echo hello world Next we notice that the user policy created the entry @hourly echo Don't do that Dave. If we inspect the crontab of the user tux, we see the entry. &gt; sudo crontab -l -u LIZARDO\\\\tux ### autogenerated by samba # # This file is generated by the gp_scripts_ext Group Policy # Client Side Extension. To modify the contents of this file, # modify the appropriate Group Policy objects which apply # to this machine. DO NOT MODIFY THIS FILE DIRECTLY. # @hourly echo Don&#39;t do that Dave ### autogenerated by samba ### "],["startupscripts.html", "7 Startup Script Policies 7.1 Server Side Extension 7.2 Client Side Extension", " 7 Startup Script Policies Startup scripts earn themselves a chapter independant of the Script Polices chapter because they are so thoroughly different. The Startup Scripts Policy started as a compatability layer for Vintela’s Startup Scripts, but became the defacto standard for Samba also. This policy has no Server Side Extension in the Group Policy Management Editor (GPME), but only provides a samba-tool command for setting the policy. A nice advantage to using this policy is that when using the samba-tool gpo manage command to set the policy, it automatically uploads the script file you specify to the SYSVOL. This policy is physically stored on the SYSVOL in the MACHINE/VGP/VTLA/Unix/Scripts/Startup/manifest.xml file in the subdirectory of the Group Policy Object. They are stored in an xml format, and are easily modified manually using a text editor. 7.1 Server Side Extension Startup Script Policies have no GPME Server Side Extension (SSE), so this policy may only be administered using samba-tool gpo manage scripts startup. This is because this SSE is stored on the SYSVOL as an xml file, not in the Registry.pol from an ADMX template. 7.1.1 Managing Startup Script Policies via samba-tool The Startup Scripts samba-tool command has 3 subcommands; add, list, and remove. &gt; samba-tool gpo manage scripts startup --help Usage: samba-tool gpo manage scripts startup &lt;subcommand&gt; Manage Startup Scripts Group Policy Objects Options: -h, --help show this help message and exit Available subcommands: add - Adds VGP Startup Script Group Policy to the sysvol list - List VGP Startup Script Group Policy from the sysvol remove - Removes VGP Startup Script Group Policy from the sysvol To add a new Startup Script policy to the SYSVOL, call the samba-tool gpo manage scripts startup add command. &gt; samba-tool gpo manage scripts startup add --help Usage: samba-tool gpo manage scripts startup add &lt;gpo&gt; &lt;script&gt; [args] [run_as] [options] Adds VGP Startup Script Group Policy to the sysvol This command adds a startup script policy to the sysvol. Example: samba-tool gpo manage scripts startup add {31B2F340-016D-11D2-945F-00C04FB984F9} test_script.sh &#39;\\-n \\-p all&#39; Options: --run-once Whether to run the script only once When adding a script, you pass the relative path to an existing script file. This script will be uploaded to the SYSVOL and made available to clients for execution. You can also provide an optional set of arguments that will be passed to the script when it is executed. These arguments are parsed as a single argument to the command, so they must be wrapped in quotes and all dashes (‘-’) must be escaped. There is also an optional argument run_as to instruct the client to run the script as a specific user. The optional --run-once parameter can instruct the script to execute only once, on the next startup, and not again. Let’s add a simple test script now which echos a message, and takes no arguments. By default this command will run as root. &gt; cat test_script.sh #!/bin/sh echo Something is happening here at startup &gt; samba-tool gpo manage scripts startup add {31B2F340-016D-11D2-945F-00C04FB984F9} test_script.sh -UAdministrator &gt; samba-tool gpo manage scripts startup list {31B2F340-016D-11D2-945F-00C04FB984F9} -UAdministrator @reboot root \\\\lizardo.suse.de\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\VGP\\VTLA\\Unix\\Scripts\\Startup\\test_script.sh Notice that the path to the script is now pointing to an uploaded copy on the SYSVOL. If we mount the SYSVOL, we can take a look at the xml file created by the policy. &gt; sudo mount.cifs \\\\\\\\lizardo.suse.de\\\\SYSVOL /mnt/ -ouser=Administrator &gt; cat /mnt/lizardo.suse.de/Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/VGP/VTLA/Unix/Scripts/Startup/manifest.xml | xmllint --format - &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;vgppolicy&gt; &lt;policysetting&gt; &lt;version&gt;1&lt;/version&gt; &lt;name&gt;Unix Scripts&lt;/name&gt; &lt;description&gt;Represents Unix scripts to run on Group Policy clients&lt;/description&gt; &lt;data&gt; &lt;listelement&gt; &lt;script&gt;test_script.sh&lt;/script&gt; &lt;hash&gt;3F1F0449B3070AD113B2878C751C4887&lt;/hash&gt; &lt;/listelement&gt; &lt;/data&gt; &lt;/policysetting&gt; &lt;/vgppolicy&gt; If you wanted to remove this policy later, we would issue the samba-tool gpo manage scripts startup remove command. &gt; samba-tool gpo manage scripts startup remove {31B2F340-016D-11D2-945F-00C04FB984F9} -UAdministrator test_script.sh 7.2 Client Side Extension The Startup Scripts Client Side Extension (CSE) creates @reboot cron jobs on the Linux client. Startup Scripts only apply for Machine policy. We created a test script in the previous section. If we now list the Resultant Set of Policy on the client, we see this: &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: vgp_startup_scripts_ext ----------------------------------------------------------- Policy Type: VGP/Unix Settings/Startup Scripts ----------------------------------------------------------- [ @reboot root /var/lib/samba/gpo_cache/LIZARDO.SUSE.DE/POLICIES/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/VGP/VTLA/UNIX/SCRIPTS/STARTUP/TEST_SCRIPT.SH ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= If we now force the policy to apply, we’ll see our script is scheduled to execute using a cron job. &gt; sudo /usr/sbin/samba-gpupdate --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;VGP/Unix Settings/Startup Scripts&quot;&gt; &lt;attribute name=&quot;test_script.sh:3F1F0449B3070AD113B2878C751C4887:&quot;&gt;/etc/cron.d/gp_vzldfcii&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; &gt; sudo cat /etc/cron.d/gp_vzldfcii ### autogenerated by samba # # This file is generated by the vgp_startup_scripts_ext Group Policy # Client Side Extension. To modify the contents of this file, # modify the appropriate Group Policy objects which apply # to this machine. DO NOT MODIFY THIS FILE DIRECTLY. # @reboot root /var/lib/samba/gpo_cache/LIZARDO.SUSE.DE/POLICIES/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/VGP/VTLA/UNIX/SCRIPTS/STARTUP/TEST_SCRIPT.SH You can see we found the location of our cron job by outputing the applied policy from our Group Policy Log. The cron job instructs the script to execute as root on every reboot. Let’s also verify our script has been deployed on the client. &gt; sudo cat /var/lib/samba/gpo_cache/LIZARDO.SUSE.DE/POLICIES/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/VGP/VTLA/UNIX/SCRIPTS/STARTUP/TEST_SCRIPT.SH #!/bin/sh echo Something is happening here at startup "],["files.html", "8 Files Policy 8.1 Server Side Extension 8.2 Client Side Extension", " 8 Files Policy The Files Policy is useful to use in conjunction with the Scripts Policy, since it can be used to copy scripts to your client machine. This policy is also useful for deploying custom config files, etc. Like Startup Scripts, this policy began as a compatability layer for Vintela’s Files policy, but has become a Samba standard also. There is no Server Side Extension for the Group Policy Management Editor (GPME), but must be modified using the samba-tool gpo manage. This policy is physically stored on the SYSVOL in the MACHINE/VGP/VTLA/Unix/Files/manifest.xml file in the subdirectory of the Group Policy Object. It is stored in an xml format, and is easily modified manually using a text editor. 8.1 Server Side Extension The Files Policy has no GPME Server Side Extension (SSE), so this policy may only be administered using samba-tool gpo manage files. This is because this SSE is stored on the SYSVOL as an xml file, not in the Registry.pol from an ADMX template. 8.1.1 Managing the Files Policy via samba-tool The Files samba-tool command has 3 subcommands; add, list, and remove. &gt; samba-tool gpo manage files --help Usage: samba-tool gpo manage files &lt;subcommand&gt; Manage Files Group Policy Objects Options: -h, --help show this help message and exit Available subcommands: add - Add VGP Files Group Policy to the sysvol list - List VGP Files Group Policy from the sysvol remove - Remove VGP Files Group Policy from the sysvol To add a new File policy to the SYSVOL, call the samba-tool gpo manage files add command. &gt; samba-tool gpo manage files add --help Usage: samba-tool gpo manage files add &lt;gpo&gt; &lt;source&gt; &lt;target&gt; &lt;user&gt; &lt;group&gt; &lt;mode&gt; [options] Add VGP Files Group Policy to the sysvol This command adds files which will be copied from the sysvol and applied to winbind clients. Example: samba-tool gpo manage files add {31B2F340-016D-11D2-945F-00C04FB984F9} ./source.txt /usr/share/doc/target.txt root root 600 The source argument refers to the source file on the host you are running the command from. This source file will be uploaded to the SYSVOL. The target argument is where the file should be deployed to on the client by the CSE. The user, group and mode refer to the attributes which will be assigned to the file when it is deployed to the client. If, for example, we were to create a daily script (as described in chapter 6), we could use this policy to deploy that script to the Linux client. Let’s now create a policy for testing that deployment. &gt; cat test_script.sh #!/bin/sh echo Something is happening daily &gt; samba-tool gpo manage files add {31B2F340-016D-11D2-945F-00C04FB984F9} ./test_script.sh /usr/bin/test_script.sh root root 555 -UAdministrator &gt; samba-tool gpo manage files list {31B2F340-016D-11D2-945F-00C04FB984F9} -UAdministrator -r-xr-xr-x root root /usr/bin/test_script.sh -&gt; test_script.sh The output of the samba-tool gpo manage files list command now shows that we have a policy set which will deploy a link to our test_script.sh on the host. If we check the contents of the SYSVOL, we can see that our file has been uploaded successfully. &gt; sudo mount.cifs \\\\\\\\lizardo.suse.de\\\\SYSVOL /mnt/ -ouser=Administrator &gt; l /mnt/lizardo.suse.de/Policies/\\{31B2F340-016D-11D2-945F-00C04FB984F9\\}/MACHINE/VGP/VTLA/Unix/Files/ total 2 drwxr-xr-x 2 root root 0 Nov 15 09:55 ./ drwxr-xr-x 2 root root 0 Nov 15 09:55 ../ -rwxr-xr-x 1 root root 532 Nov 15 09:55 manifest.xml* -rwxr-xr-x 1 root root 45 Nov 15 09:55 test_script.sh* Let’s take a look at the contents of the manifest.xml which stores our policy. &gt; cat /mnt/lizardo.suse.de/Policies/\\{31B2F340-016D-11D2-945F-00C04FB984F9\\}/MACHINE/VGP/VTLA/Unix/Files/manifest.xml | xmllint --format - &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;vgppolicy&gt; &lt;policysetting&gt; &lt;version&gt;1&lt;/version&gt; &lt;name&gt;Files&lt;/name&gt; &lt;description&gt;Represents file data to set/copy on clients&lt;/description&gt; &lt;data&gt; &lt;file_properties&gt; &lt;source&gt;test_script.sh&lt;/source&gt; &lt;target&gt;/usr/bin/test_script.sh&lt;/target&gt; &lt;user&gt;root&lt;/user&gt; &lt;group&gt;root&lt;/group&gt; &lt;permissions type=&quot;user&quot;&gt; &lt;read/&gt; &lt;execute/&gt; &lt;/permissions&gt; &lt;permissions type=&quot;group&quot;&gt; &lt;read/&gt; &lt;execute/&gt; &lt;/permissions&gt; &lt;permissions type=&quot;other&quot;&gt; &lt;read/&gt; &lt;execute/&gt; &lt;/permissions&gt; &lt;/file_properties&gt; &lt;/data&gt; &lt;/policysetting&gt; &lt;/vgppolicy&gt; Our source now refers to the file uploaded to the same directory as the manifest. If you wanted to remove this policy later, we would issue the samba-tool gpo manage files remove command. &gt; samba-tool gpo manage files remove {31B2F340-016D-11D2-945F-00C04FB984F9} /usr/bin/test_script.sh -UAdministrator Afterward the files list should be empty. 8.2 Client Side Extension The Files Client Side Extension (CSE) copies the file from the SYSVOL to the location specified in the target variable earlier. The Files Policy only applies to Machine policy. Let’s now list the Resultant Set of Policy on the Linux client to see the test file we created previously. &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: vgp_files_ext ----------------------------------------------------------- Policy Type: VGP/Unix Settings/Files ----------------------------------------------------------- [ -r-xr-xr-x root root /usr/bin/test_script.sh -&gt; test_script.sh ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= Note that while the output appears to suggest we will be creating a symlink, it is actually a hard copy of the file that is created. The syntax of the output is simply for illustrative purposes. If we now force the policy to apply, we’ll see our file is physically copied to the requested location, along with the requested permissions. &gt; sudo /usr/sbin/samba-gpupdate --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;VGP/Unix Settings/Files&quot;&gt; &lt;attribute name=&quot;/usr/bin/test_script.sh&quot;&gt;268dc84d9987bf1ebf741c3a8172e43a9429c3aa6c1044117221a057b1bffd7ec0ef806dfe9ec4e8b061a2331d99048206a31e1aec635454b1e64ed4a72c9b39:root:root:365&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; &gt; l /usr/bin/test_script.sh -r-xr-xr-x 1 root root 45 Nov 15 12:07 /usr/bin/test_script.sh* &gt; cat /usr/bin/test_script.sh #!/bin/sh echo Something is happening daily The script is present where we requested. You can now refer to chapter 6 section 6.1.1 for details on how to schedule a job to execute this script via the Scripts Policy. "],["symlink.html", "9 Symlink Policies 9.1 Server Side Extension 9.2 Client Side Extension", " 9 Symlink Policies The purpose of this policy is to create a symbolic link on a Linux client. Only Machine policy is supported. This policy could be useful in conjunction with the Files Policy found in chapter 8. This policy is physically stored on the SYSVOL in the MACHINE/VGP/VTLA/Unix/Symlink/manifest.xml file in the subdirectory of the Group Policy Object. It is stored in an xml format, and is easily modified manually using a text editor. 9.1 Server Side Extension The Symlink Policy has no GPME Server Side Extension (SSE), so this policy may only be administered using samba-tool gpo manage symlink. This is because this SSE is stored on the SYSVOL as an xml file, not in the Registry.pol from an ADMX template. 9.1.1 Managing the Symlink Policy via samba-tool The Symlink samba-tool command has 3 subcommands; add, list, and remove. &gt; samba-tool gpo manage symlink --help Usage: samba-tool gpo manage symlink &lt;subcommand&gt; Manage symlink Group Policy Objects Options: -h, --help show this help message and exit Available subcommands: add - Adds a VGP Symbolic Link Group Policy to the sysvol list - List VGP Symbolic Link Group Policy from the sysvol remove - Removes a VGP Symbolic Link Group Policy from the sysvol To add a new Symlink policy to the SYSVOL, call the samba-tool gpo manage symlink add command. &gt; samba-tool gpo manage symlink add --help Usage: samba-tool gpo manage symlink add &lt;gpo&gt; &lt;source&gt; &lt;target&gt; [options] Adds a VGP Symbolic Link Group Policy to the sysvol This command adds a symlink setting to the sysvol that will be applied to winbind clients. Example: samba-tool gpo manage symlink add {31B2F340-016D-11D2-945F-00C04FB984F9} /tmp/source /tmp/target This command will add a policy instructing the client to create a symbolic link pointing to source named target. Let’s add a simple policy, which uploads a configuration file using the Files Policy (see chapter 8), then symlinks that configuration file to somewhere useful on the system. &gt; cat servlist.conf N=Libera.Chat L=1 E=UTF-8 (Unicode) F=23 D=0 S=irc.libera.chat/6697 J=#samba-technical &gt; samba-tool gpo manage files add {31B2F340-016D-11D2-945F-00C04FB984F9} servlist.conf /usr/share/servlist.conf &#39;LIZARDO\\tux&#39; &#39;LIZARDO\\domain users&#39; 600 -UAdministrator &gt; samba-tool gpo manage files list {31B2F340-016D-11D2-945F-00C04FB984F9} -UAdministrator -rw------- LIZARDO\\tux LIZARDO\\domain users /usr/share/servlist.conf -&gt; servlist.conf &gt; samba-tool gpo manage symlink add {31B2F340-016D-11D2-945F-00C04FB984F9} /usr/share/servlist.conf /home/LIZARDO/tux/.config/hexchat/servlist.conf -UAdministrator &gt; samba-tool gpo manage symlink list {31B2F340-016D-11D2-945F-00C04FB984F9} -UAdministrator ln -s /usr/share/servlist.conf /home/LIZARDO/tux/.config/hexchat/servlist.conf Here we are uploading a configuration file for hexchat, then symlinking it to a user’s profile. The samba-tool gpo manage symlink list command displays the link operations that will be performed on the client. Later when we choose to remove this policy, we will do so with the samba-tool gpo manage symlink remove command. &gt; samba-tool gpo manage symlink remove {31B2F340-016D-11D2-945F-00C04FB984F9} /usr/share/servlist.conf /home/LIZARDO/tux/.config/hexchat/servlist.conf -UAdministrator 9.2 Client Side Extension The Symlink Client Side Extension (CSE) creates a symlink between the source and target. Startup Scripts only apply for Machine policy. Let’s list the Resultant Set of Policy to view the symbolic link policy we created in the previous section. &gt; sudo /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: vgp_symlink_ext ----------------------------------------------------------- Policy Type: VGP/Unix Settings/Symbolic Links ----------------------------------------------------------- [ ln -s /usr/share/servlist.conf /home/LIZARDO/tux/.config/hexchat/servlist.conf ] ----------------------------------------------------------- ----------------------------------------------------------- CSE: vgp_files_ext ----------------------------------------------------------- Policy Type: VGP/Unix Settings/Files ----------------------------------------------------------- [ -rw------- LIZARDO\\tux LIZARDO\\domain users /usr/share/servlist.conf -&gt; servlist.conf ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= In addition to our Symlink policy, we also see the Files policy which we added in conjunction with this. Let’s now force our policy to apply and see how the CSE behaves. &gt; sudo /usr/sbin/samba-gpupdate --force &gt; sudo tdbdump /var/lib/samba/gpo.tdb -k &quot;TESTSYSDM$&quot; | sed -r &quot;s/\\\\\\22/\\&quot;/g&quot; | xmllint --format - &lt;?xml version=&quot;1.0&quot;?&gt; &lt;gp&gt; &lt;user name=&quot;TESTSYSDM$&quot;&gt; &lt;guid value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;&gt; &lt;gp_ext name=&quot;VGP/Unix Settings/Files&quot;&gt; &lt;attribute name=&quot;/usr/share/servlist.conf&quot;&gt;d5b57f062b2cad7cb7dbfa31e9dc7bb951a41feb47fb9e91e24dbf14d2279a8c55baf32429e079c4707539f2f1e70a30db26999f5834f473c020f60c2740820c:LIZARDO\\5Ctux:LIZARDO\\5Cdomain users:384&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;gp_ext name=&quot;VGP/Unix Settings/Symbolic Links&quot;&gt; &lt;attribute name=&quot;/usr/share/servlist.conf:/home/LIZARDO/tux/.config/hexchat/servlist.conf&quot;&gt;/home/LIZARDO/tux/.config/hexchat/servlist.conf&lt;/attribute&gt; &lt;/gp_ext&gt; &lt;/guid&gt; &lt;applylog&gt; &lt;guid count=&quot;0&quot; value=&quot;{31B2F340-016D-11D2-945F-00C04FB984F9}&quot;/&gt; &lt;/applylog&gt; &lt;/user&gt; &lt;/gp&gt; &gt; l /usr/share/servlist.conf -rw------- 1 LIZARDO\\tux LIZARDO\\domain users 87 Nov 15 13:51 /usr/share/servlist.conf &gt; sudo l /home/LIZARDO/tux/.config/hexchat/servlist.conf lrwxrwxrwx 1 root root 24 Nov 15 13:51 /home/LIZARDO/tux/.config/hexchat/servlist.conf -&gt; /usr/share/servlist.conf Our Group Policy Log at /var/lib/samba/gpo.tdb shows the two policies have been applied. Listing the target, we also see that the symlink now exists. If we output the contents of our symlink, we can see that it is indeed pointing to our configuration file that we uploaded to the SYSVOL earlier. &gt; sudo cat /home/LIZARDO/tux/.config/hexchat/servlist.conf N=Libera.Chat L=1 E=UTF-8 (Unicode) F=23 D=0 S=irc.libera.chat/6697 J=#samba-technical "],["sudoers.html", "10 Sudoers Policies", " 10 Sudoers Policies "],["msgs.html", "11 Message Policies", " 11 Message Policies "],["pamaccess.html", "12 PAM Access Policies", " 12 PAM Access Policies "],["certautoenroll.html", "13 Certificate Auto Enrollment Policy 13.1 Configuring Certificate Auto Enrollment on the Server 13.2 Enable Certificate Auto Enrollment on the Client 13.3 Where to find certificates", " 13 Certificate Auto Enrollment Policy Certificate Auto Enrollment allows devices to enroll for certificates from Active Directory Certificate Services. As of Samba 4.16, Linux clients can now auto enroll for certificates just like a Windows client. Samba’s Certificate Auto Enrollment uses the certmonger service to keep track of certificates. It also uses the cepces plugin to certmonger. The sscep command is also used to download the trust chain. Certificate Auto Enrollment is compatible with both Winbind and SSSD. Certificate Auto Enrollment is initiated using Samba’s Group Policy client, samba-gpupdate. 13.1 Configuring Certificate Auto Enrollment on the Server The Windows server roles Certification Authority, Certificate Enrollment Policy Web Service, and Certificate Enrollment Web Service all must be installed and configured. Optionally the role Network Device Enrollment Service can be installed to simplify the fetching of the root certificate chain. 13.1.1 Configure server certificate auto-enrollment TODO 13.1.2 Configure user certificate auto-enrollment TODO 13.2 Enable Certificate Auto Enrollment on the Client To setup Certificate Auto Enrollment: Install certmonger and cepces. Optionally also install sscep to simplify fetching of the certificate root chain. Samba uses certmonger paired with cepces to monitor the host certificate templates. Join to an Active Directory domain (one where the CA has been previously configured as explained above). Enable group policy apply: For a Winbind joined machine by setting the smb.conf global parameter ‘apply group policies = yes’. For a SSSD joined machine by installing the oddjob-gpupdate package. To verify Certificate Auto Enrollment is correctly configured, issue the command /usr/sbin/samba-gpupdate --rsop Resultant Set of Policy Computer Policy GPO: Default Domain Policy ================================================================= CSE: gp_cert_auto_enroll_ext ----------------------------------------------------------- Policy Type: Auto Enrollment Policy ----------------------------------------------------------- [ &lt;REDACTED CA NAME&gt; ] = [ CA Certificate ] = ----BEGIN CERTIFICATE---- &lt;REDACTED&gt; ----END CERTIFICATE---- [ Auto Enrollment Server ] = &lt;REDACTED DNS NAME&gt; [ Templates ] = [ Machine ] ----------------------------------------------------------- ----------------------------------------------------------- ================================================================= Issuing the getcert list command will display the installed certificates: Number of certificates and requests being tracked: 1. Request ID &#39;Machine&#39;: status: MONITORING stuck: no key pair storage: type=FILE,location=&#39;/var/lib/samba/private/certs/Machine.key&#39; certificate: type=FILE,location=&#39;/var/lib/samba/certs/Machine.crt&#39; CA: &lt;My CA&gt; issuer: CN=&lt;My CA&gt; subject: CN=&lt;my hostname&gt; expires: 2017-08-15 17:37:02 UTC dns: &lt;my hostname&gt; key usage: digitalSignature,keyEncipherment eku: id-kp-clientAuth,id-kp-serverAuth certificate template/profile: Machine pre-save command: post-save command: track: yes auto-renew: yes 13.3 Where to find certificates Certificates are installed in /var/lib/samba/certs and private keys are installed in /var/lib/samba/private/certs. "],["firefox.html", "14 Firefox Policy", " 14 Firefox Policy "],["chrome.html", "15 Chromium/Chrome Policy", " 15 Chromium/Chrome Policy "],["gnome.html", "16 GNOME Settings Policy", " 16 GNOME Settings Policy "],["openssh.html", "17 OpenSSH Policy", " 17 OpenSSH Policy "],["firewalld.html", "18 Firewalld Policy", " 18 Firewalld Policy "],["cse.html", "19 Writing Client Side Extensions", " 19 Writing Client Side Extensions "],["sse.html", "20 Writing Server Side Extensions 20.1 Administrative Templates 20.2 samba-tool gpo manage", " 20 Writing Server Side Extensions 20.1 Administrative Templates 20.2 samba-tool gpo manage "],["regpol.html", "21 Modifying a Registry.pol File", " 21 Modifying a Registry.pol File There is no existing tool for modifying a Registry.pol on Linux, but Samba provides python libraries for manipulating these files. The following python code snippet demonstrates how to open one of these files. from samba.ndr import ndr_unpack from samba.dcerpc import preg raw = open(&#39;Registry.pol&#39;, &#39;rb&#39;).read() pol_conf = ndr_unpack(preg.file, raw) The parsed file contains a list of entries, which you can iterate over. Each entry contains a keyname, valuename, and data. for e in pol_conf.entries: print(e.keyname, e.valuename, e.data) Writing to the pol_conf can be tricky. If you write the length of the entries prior to writing the entries, it will actually cause memory corruption (this is a bug). So ensure you write to the entries, then to the length. You can create an entry using the preg import from samba.dcerpc. e = preg.entry() e.keyname = b&#39;Software\\\\Policies\\\\Samba\\\\smb_conf&#39; e.valuename = b&#39;apply group policies&#39; e.type = 4 # REG_DWORD, an integer e.data = 1 entries = list(pol_data.entries) entries.append(e) pol_data.entries = entries pol_data.num_entries = len(entries) # Ensure you set the new num_entries last The data type refers to Microsoft defined registry types: Registry type name Registry type value REG_NONE 0 REG_SZ 1 REG_EXPAND_SZ 2 REG_BINARY 3 REG_DWORD 4 REG_DWORD_BIG_ENDIAN 5 REG_LINK 6 REG_MULTI_SZ 7 REG_RESOURCE_LIST 8 REG_QWORD 11 To write your changes back to the Registry.pol file, you’ll use the following: from samba.ndr import ndr_pack with open(&#39;Registry.pol&#39;, &#39;wb&#39;) as w: w.write(ndr_pack(pol_data)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
